[{"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/index.js":"1","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/App.js":"2","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/reportWebVitals.js":"3","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/Table.js":"4","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/Player.js":"5","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/Card.js":"6","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/Controls.js":"7","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/settings/positions.js":"8","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/example/data.js":"9","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/settings/constants.js":"10","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/example/data2.js":"11","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/Player2.js":"12","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/DataInputField.js":"13","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/HandList.js":"14","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/HandList2.js":"15","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/table/EnhancedTableHead.js":"16","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/table/EnhancedTableToolbar.js":"17","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/LoadingModal.js":"18"},{"size":478,"mtime":1610382074769,"results":"19","hashOfConfig":"20"},{"size":1882,"mtime":1612895002415,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1610381955398,"results":"22","hashOfConfig":"20"},{"size":7745,"mtime":1612885468304,"results":"23","hashOfConfig":"20"},{"size":3358,"mtime":1612886062974,"results":"24","hashOfConfig":"20"},{"size":1131,"mtime":1612801468430,"results":"25","hashOfConfig":"20"},{"size":7947,"mtime":1612898122700,"results":"26","hashOfConfig":"20"},{"size":1210,"mtime":1612193894498,"results":"27","hashOfConfig":"20"},{"size":318121,"mtime":1611157573863,"results":"28","hashOfConfig":"20"},{"size":158,"mtime":1611846245033,"results":"29","hashOfConfig":"20"},{"size":3427,"mtime":1612178629985,"results":"30","hashOfConfig":"20"},{"size":1020,"mtime":1612193914423,"results":"31","hashOfConfig":"20"},{"size":1451,"mtime":1612893315679,"results":"32","hashOfConfig":"20"},{"size":15449,"mtime":1612802868099,"results":"33","hashOfConfig":"20"},{"size":15081,"mtime":1612897360907,"results":"34","hashOfConfig":"20"},{"size":3136,"mtime":1612897287466,"results":"35","hashOfConfig":"20"},{"size":2673,"mtime":1612884709911,"results":"36","hashOfConfig":"20"},{"size":1942,"mtime":1612894882035,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1qvt9cy",{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/index.js",[],["81","82"],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/App.js",["83","84","85","86","87"],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/reportWebVitals.js",[],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/Table.js",["88","89","90","91"],"import React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport Player from \"./Player\";\nimport Player2 from \"./Player2\";\nimport \"./Table.css\";\nimport Controls from \"./Controls\";\nimport { buttonPositions } from \"../settings/positions\";\nimport { PREFLOP, FLOP, TURN, RIVER, SHOWDOWN } from \"../settings/constants\";\n\nfunction Table({ selectedHands }) {\n    //states\n    const [players, setPlayers] = useState([\n        { playerName: \"player1\", stacksize: 12, position: 1 },\n        { playerName: \"player2\", stacksize: 9, position: 2 },\n        { playerName: \"player3\", stacksize: 4, position: 3 },\n        { playerName: \"player4\", stacksize: 4.6, position: 4 },\n        { playerName: \"player5\", stacksize: 9.2, position: 5 },\n        { playerName: \"player6\", stacksize: 11.48, position: 6 },\n        { playerName: \"player7\", stacksize: 4.6, position: 4 },\n        { playerName: \"player8\", stacksize: 9.2, position: 5 },\n        { playerName: \"player9\", stacksize: 11.48, position: 6 },\n    ]);\n\n    const [parsedHands, setPasedHands] = useState([]);\n    const [handCounter, setHandCounter] = useState(0);\n    const [actions, setActions] = useState([]);\n    const [street, setStreet] = useState(PREFLOP);\n    const [currActionTypes, setCurrActionTypes] = useState({});\n\n    const resetActions = (handCount) => {\n        console.log(\"RESET ACTIONS\");\n        const newActions = [\n            {\n                numOfActions:\n                    parsedHands[handCount].actions[PREFLOP].actions.length,\n                currAction: 0,\n            },\n            {\n                numOfActions:\n                    parsedHands[handCount].actions[FLOP].actions.length,\n                currAction: 0,\n            },\n            {\n                numOfActions:\n                    parsedHands[handCount].actions[TURN].actions.length,\n                currAction: 0,\n            },\n            {\n                numOfActions:\n                    parsedHands[handCount].actions[RIVER].actions.length,\n                currAction: 0,\n            },\n            {\n                numOfActions:\n                    parsedHands[handCount].actions[SHOWDOWN].actions.length,\n                currAction: 0,\n            },\n        ];\n        setActions(newActions);\n        setStreet(PREFLOP);\n    };\n\n    //import Data on load\n    useEffect(() => {\n        //read new actions\n        if (parsedHands.length > 0) {\n            resetActions(handCounter);\n        }\n        setPasedHands(selectedHands);\n    }, [selectedHands, parsedHands]);\n\n    //return table elements belonging to players\n    const getPlayers = () => {\n        console.log(\"get players\");\n        if (!parsedHands || parsedHands.length === 0 || actions.length === 0)\n            return \"\";\n        const btnNo = parsedHands[handCounter].table.button;\n        return parsedHands[handCounter].seats.map((seat, idx) => {\n            return (\n                <>\n                    <div\n                        className=\"table__dealerBtn\"\n                        style={buttonPositions[btnNo - 1]}\n                    >\n                        <span>D</span>\n                    </div>\n                    <Player\n                        className=\"player\"\n                        seat={seat}\n                        hand={parsedHands[handCounter]}\n                        actions={actions}\n                        street={street}\n                        currActionTypes={currActionTypes}\n                        setCurrActionTypes={setCurrActionTypes}\n                    />\n                </>\n            );\n        });\n\n        //################''DEBUg ############################\n        // return players.map((plr, idx) => {\n        //   return (\n        //     <>\n        //       <div className=\"table__dealerBtn\" style={buttonPositions[8]}>\n        //         <span>D</span>\n        //       </div>\n        //       <Player2 className=\"player\" player={plr} idx={idx} />\n        //     </>\n        //   );\n        // });\n        //'''''''''################################\n    };\n\n    // TODO: when just flop data is there, show flop as well when click on turn, clean this function up\n    const getBoardcards = () => {\n        if (!parsedHands || parsedHands.length === 0 || actions.length === 0)\n            return \"\";\n        let result = <></>;\n        if (street === PREFLOP) return result;\n        if (parsedHands[handCounter].board !== undefined) {\n            if (street === FLOP)\n                result = (\n                    <>\n                        <Card\n                            cardString={parsedHands[handCounter].board.card1}\n                        />\n                        <Card\n                            cardString={parsedHands[handCounter].board.card2}\n                        />\n                        <Card\n                            cardString={parsedHands[handCounter].board.card3}\n                        />\n                    </>\n                );\n            if (street === TURN)\n                result = (\n                    <>\n                        <Card\n                            cardString={parsedHands[handCounter].board.card1}\n                        />\n                        <Card\n                            cardString={parsedHands[handCounter].board.card2}\n                        />\n                        <Card\n                            cardString={parsedHands[handCounter].board.card3}\n                        />\n                        <Card\n                            cardString={parsedHands[handCounter].board.card4}\n                        />\n                    </>\n                );\n            if (street === RIVER || street === SHOWDOWN)\n                result = (\n                    <>\n                        <Card\n                            cardString={parsedHands[handCounter].board.card1}\n                        />\n                        <Card\n                            cardString={parsedHands[handCounter].board.card2}\n                        />\n                        <Card\n                            cardString={parsedHands[handCounter].board.card3}\n                        />\n                        <Card\n                            cardString={parsedHands[handCounter].board.card4}\n                        />\n                        <Card\n                            cardString={parsedHands[handCounter].board.card5}\n                        />\n                    </>\n                );\n        }\n        return result;\n    };\n\n    const displayPot = () => {\n        if (!parsedHands || parsedHands.length === 0 || actions.length === 0)\n            return \"\";\n        return parsedHands.length > 0\n            ? parsedHands[handCounter].actions[street].actions[\n                  actions[street].currAction\n              ].potSize\n            : \"\";\n    };\n\n    console.log(parsedHands);\n\n    return (\n        <div className=\"table\">\n            <div className=\"table-container\">\n                <div className=\"table__field\"></div>\n                {getPlayers()}\n                <div className=\"table__pot\">Pot: {displayPot()}$ </div>\n                <div className=\"table__board\">{getBoardcards()}</div>\n            </div>\n\n            <Controls\n                street={street}\n                setStreet={setStreet}\n                actions={actions}\n                setActions={setActions}\n                hand={parsedHands[handCounter]}\n                handCounter={handCounter}\n                setHandCounter={setHandCounter}\n                resetActions={resetActions}\n                parsedHands={parsedHands}\n                setCurrActionTypes={setCurrActionTypes}\n                currActionTypes={currActionTypes}\n            />\n        </div>\n    );\n}\n\nexport default Table;\n","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/Player.js",["92","93","94","95","96","97","98","99","100"],"import React, { useState, useEffect } from \"react\";\nimport \"./Player.css\";\nimport { playerPositions } from \"../settings/positions\";\nimport Card from \"./Card\";\nimport { PREFLOP, FLOP, TURN, RIVER } from \"../settings/constants\";\nimport { tableBetPositions } from \"../settings/positions\";\n\nfunction Player({\n    seat,\n    hand,\n    actions,\n    street,\n    currActionTypes,\n    setCurrActionTypes,\n}) {\n    const [currentAction, setCurrentAction] = useState(\"\");\n    const [currentBetSize, setCurrentBetSize] = useState(\"\");\n\n    const showCards = () => {\n        let cardString1 = \"back\";\n        let cardString2 = \"back\";\n        if (seat.player === hand.hero) {\n            cardString1 = hand.holecards.card1;\n            cardString2 = hand.holecards.card2;\n        }\n        hand.showdown.forEach((el) => {\n            if (el.type === \"show\" && el.player === seat.player) {\n                cardString1 = el.card1;\n                cardString2 = el.card2;\n            }\n        });\n\n        return (\n            <>\n                <div className=\"player__card1\">\n                    <Card cardString={cardString1} />\n                </div>\n                <div className=\"player__card2\">\n                    <Card cardString={cardString2} className=\"player__card2\" />\n                </div>\n            </>\n        );\n    };\n\n    const getActionType = () => {\n        const type = currActionTypes[seat.player]\n            ? currActionTypes[seat.player].type\n            : \"\";\n        return type;\n    };\n\n    console.log(\"currrr\", currActionTypes);\n    //TODO: pass in the current action and work with that - so you dont need to iterate so much\n    return (\n        <div className=\"player\" style={playerPositions[seat.seatno - 1]}>\n            <div className=\"player__cards\">{showCards()}</div>\n            <div className=\"player-container\">\n                {seat.player}\n                <br></br>\n                {currActionTypes[seat.player]\n                    ? currActionTypes[seat.player].stackSize\n                    : seat.chips}\n                <span\n                    class=\"table__bets\"\n                    style={tableBetPositions[seat.seatno - 1]}\n                >\n                    {currActionTypes[seat.player] &&\n                        currActionTypes[seat.player].amount}\n                </span>\n                <div\n                    className=\"player__action\"\n                    style={{\n                        backgroundColor:\n                            getActionType() === \"raise\" ||\n                            getActionType() === \"bet\"\n                                ? \"red\"\n                                : getActionType() === \"call\"\n                                ? \"green\"\n                                : getActionType() === \"fold\"\n                                ? \"blue\"\n                                : getActionType() === \"show\"\n                                ? \"orange\"\n                                : getActionType() === \"check\"\n                                ? \"brown\"\n                                : getActionType() === \"collect\"\n                                ? \"lightgreen\"\n                                : \"rgb(64, 103, 142)\",\n                    }}\n                >\n                    {getActionType()}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Player;\n","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/Card.js",[],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/Controls.js",["101","102"],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/settings/positions.js",[],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/example/data.js",[],["103","104"],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/settings/constants.js",[],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/example/data2.js",[],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/Player2.js",["105","106","107","108","109","110"],"import React, { useState } from \"react\";\nimport \"./Player.css\";\nimport { playerPositions } from \"../settings/positions\";\nimport Card from \"./Card\";\nimport { PREFLOP, FLOP, TURN, RIVER } from \"../settings/constants\";\nimport { tableBetPositions } from \"../settings/positions\";\n\nfunction Player({ player, idx }) {\n  const [currentAction, setCurrentAction] = useState(\"\");\n\n  return (\n    <div className=\"player\" style={playerPositions[idx]}>\n      <div className=\"player__cards\">\n        <div className=\"player__card1\">\n          <Card cardString=\"JsJd\" />\n        </div>\n        <div className=\"player__card2\">\n          <Card cardString=\"AhAs\" className=\"player__card2\" />\n        </div>\n      </div>\n      <div className=\"player-container\">\n        {player.playerName}\n        <br></br>\n        {player.stacksize}\n        <span class=\"table__bets\" style={tableBetPositions[idx]}>\n          {\"17$\"}\n        </span>\n        <div className=\"player__action\">FOLD</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Player;\n","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/DataInputField.js",[],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/HandList.js",["111","112"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\n\nimport Card from \"./Card\";\n\nfunction createData(name, calories, fat, carbs, protein) {\n    return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n    createData(\"Cupcake\", 305, 3.7, 67, 4.3),\n    createData(\"Donut\", 452, 25.0, 51, 4.9),\n    createData(\"Eclair\", 262, 16.0, 24, 6.0),\n    createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\n    createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\n    createData(\"Honeycomb\", 408, 3.2, 87, 6.5),\n    createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\n    createData(\"Jelly Bean\", 375, 0.0, 94, 0.0),\n    createData(\"KitKat\", 518, 26.0, 65, 7.0),\n    createData(\"Lollipop\", 392, 0.2, 98, 0.0),\n    createData(\"Marshmallow\", 318, 0, 81, 2.0),\n    createData(\"Nougat\", 360, 19.0, 9, 37.0),\n    createData(\"Oreo\", 437, 18.0, 63, 4.0),\n];\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === \"desc\"\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    {\n        id: \"time\",\n        numeric: false,\n        disablePadding: true,\n        label: \"Time\",\n    },\n    {\n        id: \"hand\",\n        numeric: false,\n        disablePadding: true,\n        label: \"Hand\",\n    },\n    { id: \"Board\", numeric: true, disablePadding: false, label: \"Board\" },\n    { id: \"Win\", numeric: true, disablePadding: false, label: \"Win\" },\n    { id: \"line\", numeric: true, disablePadding: false, label: \"Line\" },\n    {\n        id: \"potsize\",\n        numeric: true,\n        disablePadding: false,\n        label: \"Potsize\",\n    },\n];\n\nfunction EnhancedTableHead(props) {\n    const {\n        classes,\n        onSelectAllClick,\n        order,\n        orderBy,\n        numSelected,\n        rowCount,\n        onRequestSort,\n    } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={\n                            numSelected > 0 && numSelected < rowCount\n                        }\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ \"aria-label\": \"select all desserts\" }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? \"right\" : \"left\"}\n                        padding={headCell.disablePadding ? \"none\" : \"default\"}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : \"asc\"}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === \"desc\"\n                                        ? \"sorted descending\"\n                                        : \"sorted ascending\"}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf([\"asc\", \"desc\"]).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === \"light\"\n            ? {\n                  color: theme.palette.secondary.main,\n                  backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n              }\n            : {\n                  color: theme.palette.text.primary,\n                  backgroundColor: theme.palette.secondary.dark,\n              },\n    title: {\n        flex: \"1 1 100%\",\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected } = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography\n                    className={classes.title}\n                    color=\"inherit\"\n                    variant=\"subtitle1\"\n                    component=\"div\"\n                >\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography\n                    className={classes.title}\n                    variant=\"h6\"\n                    id=\"tableTitle\"\n                    component=\"div\"\n                >\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton aria-label=\"delete\">\n                        <DeleteIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Tooltip title=\"Filter list\">\n                    <IconButton aria-label=\"filter list\">\n                        <FilterListIcon />\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: \"100%\",\n    },\n    paper: {\n        width: \"100%\",\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: \"rect(0 0 0 0)\",\n        height: 1,\n        margin: -1,\n        overflow: \"hidden\",\n        padding: 0,\n        position: \"absolute\",\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default function HandList() {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState(\"asc\");\n    const [orderBy, setOrderBy] = React.useState(\"calories\");\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === \"asc\";\n        setOrder(isAsc ? \"desc\" : \"asc\");\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.name);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1)\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleChangeDense = (event) => {\n        setDense(event.target.checked);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows =\n        rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar numSelected={selected.length} />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size={dense ? \"small\" : \"medium\"}\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(\n                                    page * rowsPerPage,\n                                    page * rowsPerPage + rowsPerPage\n                                )\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.name);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={(event) =>\n                                                handleClick(event, row.name)\n                                            }\n                                            role=\"checkbox\"\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.name}\n                                            selected={isItemSelected}\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    checked={isItemSelected}\n                                                    inputProps={{\n                                                        \"aria-labelledby\": labelId,\n                                                    }}\n                                                />\n                                            </TableCell>\n                                            <TableCell\n                                                component=\"th\"\n                                                id={labelId}\n                                                scope=\"row\"\n                                                padding=\"none\"\n                                            >\n                                                {row.name}\n                                            </TableCell>\n                                            <TableCell align=\"left\">\n                                                <img\n                                                    src=\"/card_images/AceDia.jpg\"\n                                                    width=\"40\"\n                                                ></img>\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                {row.fat}\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                {row.carbs}\n                                            </TableCell>\n                                            <TableCell align=\"right\">\n                                                {row.protein}\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow\n                                    style={{\n                                        height: (dense ? 33 : 53) * emptyRows,\n                                    }}\n                                >\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n            <FormControlLabel\n                control={\n                    <Switch checked={dense} onChange={handleChangeDense} />\n                }\n                label=\"Dense padding\"\n            />\n        </div>\n    );\n}\n","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/HandList2.js",["113","114","115","116","117"],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/table/EnhancedTableHead.js",["118","119"],"/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/table/EnhancedTableToolbar.js",["120"],"import React from \"react\";\n\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport clsx from \"clsx\";\nimport { lighten, makeStyles } from \"@material-ui/core/styles\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === \"light\"\n            ? {\n                  color: theme.palette.secondary.main,\n                  backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n              }\n            : {\n                  color: theme.palette.text.primary,\n                  backgroundColor: theme.palette.secondary.dark,\n              },\n    title: {\n        flex: \"1 1 100%\",\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected, handleClickPlay } = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography\n                    className={classes.title}\n                    color=\"inherit\"\n                    variant=\"subtitle1\"\n                    component=\"div\"\n                >\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography\n                    className={classes.title}\n                    variant=\"h6\"\n                    id=\"tableTitle\"\n                    component=\"div\"\n                >\n                    Hand List\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <>\n                    <Tooltip title=\"Play in Replayer\">\n                        <IconButton\n                            aria-label=\"delete\"\n                            onClick={handleClickPlay}\n                        >\n                            <PlayArrowIcon />\n                        </IconButton>\n                    </Tooltip>\n                </>\n            ) : (\n                <Tooltip title=\"Filter list\">\n                    <IconButton aria-label=\"filter list\">\n                        <FilterListIcon />\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nexport default EnhancedTableToolbar;\n","/Users/korni/Documents/Arbeit/coding/React/16PkrSessionRev/hand-replayer/hand-rep/src/components/LoadingModal.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":4,"column":8,"nodeType":"127","messageId":"128","endLine":4,"endColumn":16},{"ruleId":"125","severity":1,"message":"129","line":7,"column":10,"nodeType":"127","messageId":"128","endLine":7,"endColumn":15},{"ruleId":"125","severity":1,"message":"130","line":8,"column":8,"nodeType":"127","messageId":"128","endLine":8,"endColumn":20},{"ruleId":"125","severity":1,"message":"131","line":10,"column":20,"nodeType":"127","messageId":"128","endLine":10,"endColumn":30},{"ruleId":"125","severity":1,"message":"132","line":10,"column":32,"nodeType":"127","messageId":"128","endLine":10,"endColumn":44},{"ruleId":"125","severity":1,"message":"133","line":4,"column":8,"nodeType":"127","messageId":"128","endLine":4,"endColumn":15},{"ruleId":"125","severity":1,"message":"134","line":12,"column":12,"nodeType":"127","messageId":"128","endLine":12,"endColumn":19},{"ruleId":"125","severity":1,"message":"135","line":12,"column":21,"nodeType":"127","messageId":"128","endLine":12,"endColumn":31},{"ruleId":"136","severity":1,"message":"137","line":70,"column":8,"nodeType":"138","endLine":70,"endColumn":36,"suggestions":"139"},{"ruleId":"125","severity":1,"message":"140","line":1,"column":27,"nodeType":"127","messageId":"128","endLine":1,"endColumn":36},{"ruleId":"125","severity":1,"message":"141","line":5,"column":10,"nodeType":"127","messageId":"128","endLine":5,"endColumn":17},{"ruleId":"125","severity":1,"message":"142","line":5,"column":19,"nodeType":"127","messageId":"128","endLine":5,"endColumn":23},{"ruleId":"125","severity":1,"message":"143","line":5,"column":25,"nodeType":"127","messageId":"128","endLine":5,"endColumn":29},{"ruleId":"125","severity":1,"message":"144","line":5,"column":31,"nodeType":"127","messageId":"128","endLine":5,"endColumn":36},{"ruleId":"125","severity":1,"message":"145","line":16,"column":12,"nodeType":"127","messageId":"128","endLine":16,"endColumn":25},{"ruleId":"125","severity":1,"message":"146","line":16,"column":27,"nodeType":"127","messageId":"128","endLine":16,"endColumn":43},{"ruleId":"125","severity":1,"message":"147","line":17,"column":12,"nodeType":"127","messageId":"128","endLine":17,"endColumn":26},{"ruleId":"125","severity":1,"message":"148","line":17,"column":28,"nodeType":"127","messageId":"128","endLine":17,"endColumn":45},{"ruleId":"125","severity":1,"message":"149","line":24,"column":11,"nodeType":"127","messageId":"128","endLine":24,"endColumn":30},{"ruleId":"136","severity":1,"message":"150","line":62,"column":8,"nodeType":"138","endLine":62,"endColumn":17,"suggestions":"151"},{"ruleId":"121","replacedBy":"152"},{"ruleId":"123","replacedBy":"153"},{"ruleId":"125","severity":1,"message":"141","line":5,"column":10,"nodeType":"127","messageId":"128","endLine":5,"endColumn":17},{"ruleId":"125","severity":1,"message":"142","line":5,"column":19,"nodeType":"127","messageId":"128","endLine":5,"endColumn":23},{"ruleId":"125","severity":1,"message":"143","line":5,"column":25,"nodeType":"127","messageId":"128","endLine":5,"endColumn":29},{"ruleId":"125","severity":1,"message":"144","line":5,"column":31,"nodeType":"127","messageId":"128","endLine":5,"endColumn":36},{"ruleId":"125","severity":1,"message":"145","line":9,"column":10,"nodeType":"127","messageId":"128","endLine":9,"endColumn":23},{"ruleId":"125","severity":1,"message":"146","line":9,"column":25,"nodeType":"127","messageId":"128","endLine":9,"endColumn":41},{"ruleId":"125","severity":1,"message":"154","line":24,"column":8,"nodeType":"127","messageId":"128","endLine":24,"endColumn":12},{"ruleId":"155","severity":1,"message":"156","line":377,"column":49,"nodeType":"157","endLine":380,"endColumn":50},{"ruleId":"125","severity":1,"message":"158","line":10,"column":10,"nodeType":"127","messageId":"128","endLine":10,"endColumn":17},{"ruleId":"159","severity":1,"message":"160","line":93,"column":60,"nodeType":"161","messageId":"162","endLine":93,"endColumn":62},{"ruleId":"159","severity":1,"message":"160","line":98,"column":64,"nodeType":"161","messageId":"162","endLine":98,"endColumn":66},{"ruleId":"155","severity":1,"message":"156","line":271,"column":53,"nodeType":"157","endLine":284,"endColumn":55},{"ruleId":"155","severity":1,"message":"156","line":289,"column":53,"nodeType":"157","endLine":302,"endColumn":55},{"ruleId":"125","severity":1,"message":"163","line":4,"column":8,"nodeType":"127","messageId":"128","endLine":4,"endColumn":13},{"ruleId":"125","severity":1,"message":"164","line":45,"column":9,"nodeType":"127","messageId":"128","endLine":45,"endColumn":16},{"ruleId":"125","severity":1,"message":"165","line":7,"column":8,"nodeType":"127","messageId":"128","endLine":7,"endColumn":18},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"no-unused-vars","'HandList' is defined but never used.","Identifier","unusedVar","'input' is defined but never used.","'LoadingModal' is defined but never used.","'parseHands' is assigned a value but never used.","'extractHands' is assigned a value but never used.","'Player2' is defined but never used.","'players' is assigned a value but never used.","'setPlayers' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handCounter' and 'resetActions'. Either include them or remove the dependency array.","ArrayExpression",["168"],"'useEffect' is defined but never used.","'PREFLOP' is defined but never used.","'FLOP' is defined but never used.","'TURN' is defined but never used.","'RIVER' is defined but never used.","'currentAction' is assigned a value but never used.","'setCurrentAction' is assigned a value but never used.","'currentBetSize' is assigned a value but never used.","'setCurrentBetSize' is assigned a value but never used.","'initialActionObject' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'createActionObject'. Either include it or remove the dependency array.",["169"],["166"],["167"],"'Card' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'lighten' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Table' is defined but never used.","'sortMax' is assigned a value but never used.","'DeleteIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [selectedHands, parsedHands, resetActions, handCounter]",{"range":"174","text":"175"},"Update the dependencies array to be: [actions, createActionObject]",{"range":"176","text":"177"},[2506,2534],"[selectedHands, parsedHands, resetActions, handCounter]",[1972,1981],"[actions, createActionObject]"]